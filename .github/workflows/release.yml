name: Release macOS DMG

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      arch:
        description: "Architecture to build (arm64 | x64 | both)"
        required: false
        default: "both"

permissions:
  contents: read

jobs:
  build-mac:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python 3.11 for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python build deps (setuptools shim for distutils)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          echo "python=$(which python3)" >> $GITHUB_ENV

      - name: Install dependencies
        env:
          npm_config_python: ${{ env.python }}
        run: npm ci

      - name: Build app (ts + vite)
        run: npm run build

      - name: Build DMG(s) (no publish)
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
        run: |
          ARCH_INPUT="${{ github.event.inputs.arch }}"
          if [ -z "$ARCH_INPUT" ] || [ "$ARCH_INPUT" = "both" ]; then
            FLAGS="--x64 --arm64"
          elif [ "$ARCH_INPUT" = "arm64" ]; then
            FLAGS="--arm64"
          elif [ "$ARCH_INPUT" = "x64" ]; then
            FLAGS="--x64"
          else
            echo "Unknown arch input: $ARCH_INPUT" && exit 1
          fi
          echo "Building for: $FLAGS"
          npx electron-builder --mac dmg $FLAGS --publish never

      # Optional: upload build artifacts for debugging even if publish fails
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dmgs
          path: release/*.dmg

  release-mac:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest
    permissions:
      contents: write
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python 3.11 for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python build deps (setuptools shim for distutils)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          echo "python=$(which python3)" >> $GITHUB_ENV

      - name: Install dependencies
        env:
          npm_config_python: ${{ env.python }}
        run: npm ci

      - name: Build app (ts + vite)
        run: npm run build

      - name: Detect notarization credentials
        run: |
          # Prefer secrets; fall back to environment variables if org policy uses vars
          if [ -n "${{ secrets.APPLE_API_KEY }}" ]; then echo "APPLE_API_KEY_SOURCE=secrets" >> $GITHUB_ENV; fi
          if [ -n "${{ vars.APPLE_API_KEY }}" ]; then echo "APPLE_API_KEY_SOURCE=vars" >> $GITHUB_ENV; fi

          if [ -n "${{ secrets.APPLE_API_KEY }}" ] || [ -n "${{ vars.APPLE_API_KEY }}" ]; then
            echo "HAS_APPLE_API_KEY=true" >> $GITHUB_ENV
          else
            echo "HAS_APPLE_API_KEY=false" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.APPLE_API_KEY_ID }}" ] || [ -n "${{ vars.APPLE_API_KEY_ID }}" ]; then
            echo "HAS_APPLE_API_KEY_ID=true" >> $GITHUB_ENV
          else
            echo "HAS_APPLE_API_KEY_ID=false" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.APPLE_API_ISSUER }}" ] || [ -n "${{ vars.APPLE_API_ISSUER }}" ]; then
            echo "HAS_APPLE_API_ISSUER=true" >> $GITHUB_ENV
          else
            echo "HAS_APPLE_API_ISSUER=false" >> $GITHUB_ENV
          fi

          if [ "$HAS_APPLE_API_KEY" = "true" ] && [ "$HAS_APPLE_API_KEY_ID" = "true" ] && [ "$HAS_APPLE_API_ISSUER" = "true" ]; then
            echo "HAS_APPLE_API=true" >> $GITHUB_ENV
          else
            echo "HAS_APPLE_API=false" >> $GITHUB_ENV
          fi

      - name: Prepare Apple API key (if provided)
        if: env.HAS_APPLE_API == 'true'
        run: |
          if [ "${APPLE_API_KEY_SOURCE}" = "vars" ]; then
            echo "${{ vars.APPLE_API_KEY }}" > ./apple_api_key.p8
            echo "APPLE_API_KEY_ID=${{ vars.APPLE_API_KEY_ID }}" >> $GITHUB_ENV
            echo "APPLE_API_ISSUER=${{ vars.APPLE_API_ISSUER }}" >> $GITHUB_ENV
          else
            echo "${{ secrets.APPLE_API_KEY }}" > ./apple_api_key.p8
            echo "APPLE_API_KEY_ID=${{ secrets.APPLE_API_KEY_ID }}" >> $GITHUB_ENV
            echo "APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }}" >> $GITHUB_ENV
          fi
          echo "APPLE_API_KEY=$(pwd)/apple_api_key.p8" >> $GITHUB_ENV

      - name: Build and publish signed DMG(s)
        env:
          CSC_LINK: ${{ secrets.CSC_LINK || vars.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD || vars.CSC_KEY_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID || vars.APPLE_TEAM_ID }}
          APPLE_API_KEY: ${{ env.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ env.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ env.APPLE_API_ISSUER }}
          APPLE_ID: ${{ secrets.APPLE_ID || vars.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD || vars.APPLE_APP_SPECIFIC_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Signing vars present:"
          for v in CSC_LINK CSC_KEY_PASSWORD APPLE_TEAM_ID APPLE_ID APPLE_APP_SPECIFIC_PASSWORD APPLE_API_KEY APPLE_API_KEY_ID APPLE_API_ISSUER; do
            if [ -n "${!v}" ]; then echo " - $v: set"; else echo " - $v: MISSING"; fi
          done
          ARCH_INPUT="${{ github.event.inputs.arch }}"
          if [ -z "$ARCH_INPUT" ] || [ "$ARCH_INPUT" = "both" ]; then
            FLAGS="--x64 --arm64"
          elif [ "$ARCH_INPUT" = "arm64" ]; then
            FLAGS="--arm64"
          elif [ "$ARCH_INPUT" = "x64" ]; then
            FLAGS="--x64"
          else
            echo "Unknown arch input: $ARCH_INPUT" && exit 1
          fi
          echo "Building signed for: $FLAGS"
          npx electron-builder --mac dmg $FLAGS --publish always

      - name: Staple notarization (best-effort)
        if: always()
        run: |
          set -e
          # Staple apps
          for APP in release/mac*/emdash.app; do
            if [ -d "$APP" ]; then
              xcrun stapler staple "$APP" || true
            fi
          done
          # Staple DMGs
          for DMG in release/*.dmg; do
            if [ -f "$DMG" ]; then
              xcrun stapler staple "$DMG" || true
            fi
          done
